[ General ]

;; A list of public arenas (base arena names) that the server should place players in when a specific arena is not requested.
;; Allowed delimiters include: ' ' (space), ',', ':', and ';'.
;; When omitted, the server will use the default public arena names: "0", "1", ...
;; which on the client-side respectively are displayed as "(Public 0)", "(Public 1)", ...
;; This setting works in conjunction with each arena's the General:DesiredPlaying arena.conf setting.
;; This requires the SS.Core.Modules.ArenaPlaceMultiPub module.
;PublicArenas = turf pb


[ Arenas ]

;; Names of arenas to permanently keep running.
;; These arenas will be created when the server is started
;; and show up on the arena list, even if no players are in them.
PermanentArenas = 2v2pub 3v3pub 4v4pub duel jackpot king pb rabbit running speed turf warzone


;; The syntax for these is:
;; [log_whatever]
;; modulename = DIMWE
;; The value tells which log levels to log:
;; D = debug, I = info, M = malicious, W = warning, E = error
;; They MUST be in caps.
;; The modulename can be "all" to catch unmatched modules.
;; If you don't filter it out, it's enabled by default.

;; For the SS.Core.Modules.LogConsole module which writes to the console.
[ log_console ]
all = DIMWE

;; For the SS.Core.Modules.LogFile module which writes to a file.
[ log_file ]
all = IMWE
persist = MWE
chat = DIMWE

;; For the SS.Core.Modules.LogSysop module, for notifying logged-in staff via chat messages.
[ log_sysop ]
all = ME

;; For the SS.Core.Modules.LogSysop module, for logs that can be seen with the ?lastlog command.
[ log_lastlog ]
all = DIMWE


;; Even though "log_staff" begins with the name "log_", it is completely unrelated to those sections.
;; This requires the SS.Core.Modules.CommandWatch module. In ASSS, the module was named log_staff, hence the section name.
;; The section name was kept the same to stay compatible with conf files created for ASSS.
[ log_staff ]
;; A list of commands that trigger messages to all logged-in staff.
commands = warn kick setcm


;; Configure the endpoints to listen on.
;; Port - The "game" UDP port that clients communicate to the server on.
;;        Note, there is always a corresponding "ping" port which is the "game" port + 1.
;; BindAddress - IP address to listen on. Leave it empty to listen on all available.
;; AllowVIE - whether to allow VIE clients
;; AllowCont - whether to allow Continuum clients
;; ConnectAs - The arena players are sent to when joining.

;; The main listening endpoint
[ Listen ]
Port = 5000
BindAddress = 
AllowVIE = 1
AllowCont = 1
ConnectAs = 

;; It is also possible to listen on additional endpoints using [Listen1], [Listen2], ...
;; Though, it is recommended to just have the single [Listen] endpoint (no number).
;; Here's a commented out example of what having additional endpoints could look like.
;; Notice the how port numbers purposely skip over the "ping" port of the prior endpoint.

;[ Listen1 ]
;Port = 5002
;BindAddress = 
;AllowVIE = 1
;AllowCont = 1
;ConnectAs = turf

;[ Listen2 ]
;Port = 5004
;BindAddress = 
;AllowVIE = 1
;AllowCont = 1
;ConnectAs = pb


[ Net ]

;; The TCP endpoint to listen on for the 'simple chat protocol'.
;; This requires the SS.Core.Modules.ChatNetwork module.
;; The setting can be either a port or IP:port.
;; When only a port is specified, it will listen on all network interfaces (any IP address available).
;; When the setting is omitted, the settings in the [Listen] section are used.
;; IPv6 addresses are also supported. When specifying a port with an IPv6 address, enclose the IP in square brackets [].
;;
;; For example, to listen on any available IPv6 address:
;; ChatListen = [::]:5000
ChatListen =


;; Settings for connecting the zone to a billing server.
;; This requires the SS.Core.Modules.BillingUdp module. Remember to uncomment it in the conf/Modules.config file.
[ Billing ]
IP = 127.0.0.1
Port = 9000
ServerName = Test zone
Password = billpw
ServerID = 0
GroupId = 1
ScoreId = 0


;; Settings to publish the zone on directory server(s).
;; This will publish every listen endpoint: [Listen], [Listen1], [Listen2], ... 
;; Thei requires the SS.Core.Modules.DirectoryPublisher module. Remember to uncomment it in the conf/Modules.config file.
[ Directory ]
Name = Test Zone
Description = Put your description here.
Password = 

;; List of directory servers to publish to.
Server1 = sscentral.sscuservers.net
Server2 = sscentral.trenchwars.org
Server3 = subspace.gamespec.org
Server4 = directory.poid.be

;; If you have multiple listen endpoints, then a different name and description can be provided for each endpoint's ConnectAs setting.
;; Here's a commented out example of what that could look like.
;; Notice how the section names are in the format: Directory-<ConnectAs>
;; and how the ConnectAs names match those in the prior [Listen1] and [Listen2] examples.

;[ Directory-turf ]
;Name = Test Zone (Turf)
;Description = Get off my lawn!

;[ Directory-pb ]
;Name = Test Zone (Powerball)
;Description = GOAL!!!


;; In the Redirects section, keys correspond to arena names. If a 
;; player tries to ?go to an arena name listed in this section, they
;; will be redirected to the zone specified as the value of the
;; setting. The format of values is 'ip:port[:arena]'.
;; Redirects only work for zones connected to the central SSC billing server.
;; This requires the SS.Core.Modules.Redirect module.
;;
;; Here's an example of what a redirect could look like:
;; test = 127.0.0.1:5004
;;
;; With this, requests to enter the arena named "test" will redirect the player.
;; The IP and port a just a dummy examples.
[ Redirects ]


;; Peer settings are to connect the zone to other "peer" zone servers.
;; This requires the SS.Core.Modules.Peer module.
;; Setting up connections to peer zones is an advanced topic.
;; Here's an example of what it could look like.
;[ Peer0 ]
;Address = 127.0.0.1
;Port = 6000
;Password = test
;SendOnly = 
;SendPlayerList = 
;SendZeroPlayerCount = 
;SendMessages = 
;ReceiveMessages = 
;IncludeInPopulation = 
;ProvidesDefaultArenas = 
;Arenas = otherpub
;SendDummyArenas = 
;RelayArenas = 
;RenameArenas = 0=otherpub


;; The Notify settings require the SS.Core.Modules.Notify module.
[ Notify ]
;; A delimited list of commands that notify online staff.
;; Allowed delimiters include: space, comma, colon, semicolon.
AlertCommand = cheater,help
;; Reply to send when trying to send a Notify:AlertCommand without a message.
EmptyReply = Please use ?man for command reference. Otherwise include a message for online staff.


;; Authenticates bots based on username and IP range.
;; The key is the username.
;; A value of "any" means any IP address can be used.
;; Otherwise, value is part or all of an IP address.
;; This requires the SS.Core.Modules.AuthVIE module.
;;
;; Examples:
;; AwesomeBot = 127.0.0.1
;; AnotherBot = any
;; PartialAddressBot = 127.0.
[ VIEnames ]

;; For the SS.Matchmaking modules
[SS.Matchmaking]
;; The connection string to the database. Used by the SS.Matchmaking.PostgreSqlGameStats module.
;DatabaseConnectionString =
